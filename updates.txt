=== FUTURE PLANS/CHANGES FOR MM_BOT ===

- simplify the functions and codes.
- Add new Sell signal which is exclusive only for Buy2? Fix SellB2
- connect mmbot to live futures data instead of testnet data ??
- add buystatus and sellstatus to mongodb
- find a way to make Buy-RSI signal work even if RSI > 30
- add tempvalue in mongodb
- repurpose get_openvalue() in mongodb
- find a way to make buy-rsi detect valid buy points in sideways phase using ema_A/B Crossover, Highest price, etc.
- find/create buy signal that buys when price spikes up during sideways phase (cant be detected by Buy-RSI)
- revise Sell-RSI and make it smarter, Sell high and dont wait to get lower


=== UPDATES IN MM_BOT ===

Summary of Changes in March 6 - March 10, 2023:

-
-
-
-
-
-
-


Summary of Changes in February 27 - March 3, 2023:

- added Buy-RSI to Major > 1.5
- added sellstatus: 'sell-rsi' in (-1.5 < x['Major'] < 1.5)
- added a 'for loop' for 'buystatus.discard('buy-rsi')' code in the buy condition of Buy-RSI to prevent false signal.
- made adjustments on buystatus: 'dontbuy'
- adjusted > 1 in Buy-RSI to 0.25 
- removed - 0.75 in Sell-RSI
- added dontbuy when -4 < Minor1[-3] < 4
- added 'else: break' in every 'for loop' codes to save time
- made Buy-RSI available to all values of Major
- Made significant changes in mmbot by removing profitless buy and sell signals, simplifying the codes, and 
  making adjustments on the remaining signals. As a result, the number of profits in Paper Trading increases but 
  losses still occur. More adjustments and additions will made based on the results within the next days to improve 
  the signals of mmbot.


Summary of Changes in February 20 - February 24, 2023:

- revamped Buy-RSI
- revamped Sell-RSI
- revamped Sell-RSIi
- changed buystatus and sellstatus variable from list type to set type
- added [buy-rsi]  in buystatus
- added [sell-rsi] in sellstatus
- made adjustments on buystatus: [dontbuy], [buy-1b]
- united the set discard function for [buy-rsi], [buy-1b], [buy1ai]
- added Buy-RSI in -1.5 < x['Major'] < 1.5. As a result, the total profit gained by mmbot in backtesting has
  increased. For the next few days, we will continue the tests and experiments on Buy-RSI signal 
  to further increase the net profit gained by mmbot.


Summary of Changes in February 13 - February 17, 2023:

- added Sellfor1Ai
- revamped Buy1Ai
- added new buystatus variable: "buy1ai"
- revamped buystatus and sellstatus variable into list
- tried to revamp Buy1Aii but resulted into much more number of trades (more commissions)
  which results in lesser net profit, therefore this is cancelled.
- tried to connect our replt mmbot to live binance account to fetch live bars (instead of testnet bars for more
  accuracy and lesser noise) but failed due to replt servers being located at US (binance.com is banned at US)
- tried to find a solution for the above issue by connecting our replt mmbot to a proxy server to change its ip
  but still failed due to SSLError: EOF occurred in violation of protocol. 

Summary of Changes in February 6 - February 10, 2023:

- #temporarily added Sell1Aii
- #temporarily added Buy1Aii2
- revamped Buy1Aii
- revamped Buy1Ai
- revamped Buy1B
- revamped Buy1Bi 
- revamped Sell1Bi
- added Sellfor1B 
- added openvalue variable
- revamped Buy-RSI
- revamped Sell-RSIi
- made some adjustments on the buystatus conditions

Summary of Changes in January 30 - February 3, 2023:

- temporarily added SellB2
- added BuyRSI
- added Buy-RSI
- added Sell-RSI
- added Sell-RSIi
- temporarily revamped Sell-RSI (5.1.1)
- added new variable called buystatus for Buy-1B

Summary of Changes in January 23-28, 2023:

- In Buy2, changed a condition from (-2 < x['Minor2[-2]'] < 1.75) to (-2 < x['Minor2[-2]']) which resulted in
  an increase in profit in backtesting but it also resulted in more trades (much more commission than before)
- Added new Sell signal with id: Sell+1A
- added Buy1Bi signal
- added Sell1Bi signal
- In Buy1Ai, removed the condition Minor2[-1] < -0.5 
- revamped Buy1Ai by adding new conditions and moving it to the last of Buy signals.
- revamped Buy2 signal
- added Buy+2 signal
- The following are the updated Buy and Sell signals of mmbot as of January 28, 2023:

The Buy signals under the (1.5 < Major[-1]) or "Bullish" section are the following:

  1. If Minor1[-2] - Minor1[-5] >= 3, then:
      A. If Minor1[-2] > -3 and close[-1] > close[-2] and -2 < Minor2[-3] and Major[-2] < 1.5, then Buy+2.

The Buy signals under the (-1.5 < Major[-1] < 1.5) or "Sideways" section are the following:

  1. If close[-1] < ema_C[-1] < ema_D[-1], then:
      A. If -2 < Minor1[-1] < -1.5, then:
          i.  If Ema_A[-3] < Ema_B[-3] and Ema_A[-1] >= Ema_B[-1] and Minor2[-1] < -0.5, then Buy1Aii.
      B. If Minor1[-1] <= -2 and Minor1[-1] - Minor1[-2] >= logarithm(-Minor1[-1], base 2), then Buy1B.
  2. If ema_D[-1] < close[-1] < ema_C[-1], then:
      A. If Minor1[-1] <= -2 and Minor1[-1] - Minor1[-2] >= logarithm(-Minor1[-1], base 2), then Buy1Bi.
  3. If Minor1[-2] - Minor1[-5] >= 3 and Minor1[-2] > -3 and close[-1] > open[-2] and -2 < Minor2[-3]
         and Minor1[-1] - Minor1[-2] > 1 and (Minor2[-1] > 0.5 or close[-1] < ema_D[-1]), then Buy2.
  4. If Minor1[-6] <= -2 and Minor1[-7] <= -2 and Minor1[-5] - Minor1[-8] > 0 and Minor1[-1] > 0, then Buy1Ai.

The Buy signals under the (Major[-1] < -1.5) or "Bearish" section are the following:

  1. If close[-1] < ema_C[-1] < ema_D[-1], then:
      A. If Minor1[-1] <= -2 and Minor1[-1] - Minor1[-2] >= logarithm(-Minor1[-1], base 2), then Buy-1B.


The Sell signals under the (1.5 < Major[-1]) or "Bullish" section are the following:

  1. If 10 <= Minor2[-1] and Minor1[-1] - Minor1[-2] <= 0, then Sell+1A

The Sell signals under the (-1.5 < Major[-1] < 1.5) or "Sideways" section are the following:

  1. If buyid == 'Buy1Bi' and close[-1] <= open[-3], then Sell1Bi.
  2. If close[-1] > ema_C[-1] > ema_D[-1], then:
      A. If 1.5 < Minor1[-1] < 2 and Ema_A[-3] > Ema_B[-3] and Ema_A[-1] <= Ema_B[-1] and Minor2[-1] > 0.5, then Sell1A.
      B. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2), then Sell1B.
  3. If ema_C[-1] >= close[-1] > ema_D[-1], then:
      A. If close[-2] >= ema_C[-2] and close[-3] >= ema_C[-3] and close[-1] >= Buy_value + 1, then Sell2A.
  4. If ema_D[-1] >= close[-1] > ema_C[-1] or close[-1] >= ema_D[-1] > ema_C[-1], then:
      A. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2), then Sell3A.

The Sell signals under the (Major[-1] < -1.5) or "Bearish" section are the following:

  1. If Minor1[-1] < -2 and close[-1] <= Buy_value and buyid == 'Buy-1B', then Sell-1Bi.
  2. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2) 
        and buyid == 'Buy-1B', then Sell-1B.




Summary of Changes in January 16-20, 2023:

- added new function in mongodb called store_buyval_history() which records the date, time, buy value, buy id,
  and other datas in the database for analyzation purposes. It also updates the placeholder for the buy value.
- deleted the function store_placeholder_buy() in mongodb as its purpose is now included in store_buyval_history()
- added sell id in store_profit_history() function in mongodb to be recorded in database for
  analyzation purposes.
- improved the buy conditions of Buy1B from (float(bars.Minor1.iloc[-1]) - float(bars.Minor1.iloc[-2]) >= 1) 
  into (float(bars.Minor1.iloc[-1]) - float(bars.Minor1.iloc[-2]) >= math.log(-float(bars.Minor1.iloc[-1]),2)).
  This makes the condition more adaptive based on how bearish the price was before spiking up.
- Added an ID for each buy and sell signals for reference and to specify which sell signals can be used by
  specific buy signals only. These IDs might be changed later on in the future.
- Added new Buy signal under float(bars.Major.iloc[-1]) <= -1.5 with id: Buy-1B. This signal can be triggered
  if the Major trend is bearish.
- Added new Sell signal under -1.5 < float(bars.Major.iloc[-1]) < 1.5 with id: Sell3A. This signal can be 
  triggered if the Major trend is sideways.
- Added new Sell signals under float(bars.Major.iloc[-1]) <= -1.5 with ids: Sell-1Bi and Sell-1B. These signals
  can only be triggered by Buy-1B if the Major trend is bearish.
- The following are the updated Buy and Sell signals of mmbot as of January 21, 2023:

The Buy signals under the (-1.5 < Major[-1] < 1.5) or "Sideways" section are the following:

  1. If close[-1] < ema_C[-1] < ema_D[-1], then:
      A. If -2 < Minor1[-1] < -1.5, then:
          i.  If Minor1[-2] <= -2 and Minor1[-3] <= -2 and Minor[-1] - Minor1[-4] > 0 and Minor2[-2] <= -0.5, then Buy.
          ii. If Ema_A[-3] < Ema_B[-3] and Ema_A[-1] >= Ema_B[-1] and Minor2[-1] < -0.5, then Buy.
      B. If Minor1[-1] <= -2 and Minor1[-1] - Minor1[-2] >= logarithm(-Minor1[-1], base 2), then Buy.
  2. If Minor[-1] - Minor1[-4] >= 3 and Minor1[-1] > -3 and close[-1] > open[-2] and -2 < Minor2[-2] < 1.75, then Buy.

The Buy signals under the (Major[-1] < -1.5) or "Bearish" section are the following:

  1. If close[-1] < ema_C[-1] < ema_D[-1], then:
      A. If Minor1[-1] < -2 and Minor1[-1] - Minor1[-2] >= logarithm(-Minor1[-1], base 2), then Buy.

The Sell signals under the (-1.5 < Major[-1] < 1.5) or "Sideways" section are the following:

  1. If close[-1] > ema_C[-1] > ema_D[-1], then:
      A. If 1.5 < Minor1[-1] < 2 and Ema_A[-3] > Ema_B[-3] and Ema_A[-1] <= Ema_B[-1] and Minor2[-1] > 0.5, then Sell.
      B. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2), then Sell.
  2. If ema_C[-1] >= close[-1] > ema_D[-1], then:
      A. If close[-2] >= ema_C[-2] and close[-3] >= ema_C[-3] and close[-1] >= Buy_value + 1, then Sell.
  3. If ema_D[-1] >= close[-1] > ema_C[-1] or close[-1] >= ema_D[-1] > ema_C[-1], then:, then:
      A. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2), then Sell.

The Sell signals under the (Major[-1] < -1.5) or "Bearish" section are the following:

  1. If Minor1[-1] < -2 and close[-1] <= Buy_value and buyid == 'Buy-1B', then Sell.
  2. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2), then Sell.



Summary of Changes in December 19 - January 13, 2023:

- Removed the 5 placeholders for Buy.
- Reset the timeframe of chart back to 1 minute.
- deleted should_buy function in mongodb and mmbot as it is no longer needed.
- added new codes (using Flask) that reruns the repl python file if there is an error in binance's side.
- added new functions: store_datab_walletbal and get_datab_walletbal in mongodb and mmbot that stores and gets our
  wallet balance for more accurate profit calculation.

- Changed the Buy and Sell logic of mmbot because there are some cases where profit is negative.
  As of today, the bot has the following indicators: Ema_3, Ema_6, Ema_80, Ema_500, SMA_1500 (also named as Ema_A,
  Ema_B, Ema_C, Ema_D, and SMA respectively). We also have other indicators such as the Linear Regression Angle 
  of Ema_80 (named as Minor1), Linear Regression Angle of Ema_500 (named as Minor2), and the Linear Regression Angle 
  of SMA_1500 (named as Major) to generate our buy and sell signals for mmbot.

  The Buy and Sell signals of mmbot are divided into three sections: 
  1.5 <= Major[-1],    -1.5 < Major[-1] < 1.5,    and Major[-1] <= -1.5

  (For context, [-1] means the latest value, [-2] means the second to the last value, [-3] means the third to the
  last value, and [-4] means the fourth to the last value, and etc.)

  If the value of Major[-1] is greater than or equal to 1.5, this means that the overall trend is Bullish in the past
  1500 candles. If the value of Major[-1] is in between -1.5 and 1.5, this means that the overall trend is about 
  sideways in the past 1500 candles. And if the value of Major[-1] is less than or equal to -1.5, the overall trend 
  is Bearish in the past 1500 candles.

  Aside from Major, we also have Minor1 and Minor2. The value of Minor2 defines the trend in the past 500 candles 
  while Minor1 defines the trend in the past 80 candles. If their value is positive, it means the trend is bullish.
  If their value is negative, it means the trend is bearish. And if their value is near zero, then the trend is about
  sideways in those past candles.
 
  As of today, mmbot only has buy and sell signals under the (-1.5 < Major[-1] < 1.5) section. We are still currently
  testing, adding, and improving the signals in this section to maximize the profit and prevent negative profits as 
  much as possible in the future. Soon, we will also be adding and testing new buy and sell signals under the 
  (1.5 <= Major[-1]) and (Major[-1] <= -1.5) sections. 

  The Buy signals under the (-1.5 < Major[-1] < 1.5) or "Sideways" section are the following:

  1. If close[-1] < ema_C[-1] < ema_D[-1], then:
      A. If -2 < Minor1[-1] < -1.5, then:
          i.  If Minor1[-2] <= -2 and Minor1[-3] <= -2 and Minor[-1] - Minor1[-4] > 0 and Minor2[-2] <= -0.5, then Buy.
          ii. If Ema_A[-3] < Ema_B[-3] and Ema_A[-1] >= Ema_B[-1] and Minor2[-1] < -0.5, then Buy.
      B. If Minor1[-1] <= -2 and Minor1[-1] - Minor1[-2] >= logarithm(-Minor1[-1], base 2), then Buy.
  2. If Minor[-1] - Minor1[-4] >= 3 and Minor1[-1] > -3 and close[-1] > open[-2] and -2 < Minor2[-2] < 1.75, then Buy.

  The Sell signals under the (-1.5 < Major[-1] < 1.5) or "Sideways" section are the following:

  1. If close[-1] > ema_C[-1] > ema_D[-1], then:
      A. If 1.5 < Minor1[-1] < 2 and Ema_A[-3] > Ema_B[-3] and Ema_A[-1] <= Ema_B[-1] and Minor2[-1] > 0.5, then Sell.
      B. If 2 <= Minor1[-1] and Minor1[-1] - Minor1[-3] <= -logarithm(Minor1[-1], base 2), then Sell.
  2. If ema_C[-1] >= close[-1] > ema_D[-1], then:
      A. If close[-2] >= ema_C[-2] and close[-3] >= ema_C[-3] and close[-1] >= Buy_value + 1, then Sell.

- Negative Profit occured on 2023-01-10 16:39:16. To prevent this from reoccuring, we have changed a code in
  Buy signal #2: from close[-1] > close[-2]   into close[-1] > open[-2].
- Negative Profits occured between 2023-01-10 17:52:52 and 2023-01-11 03:52:25. As a result, we have temporarily
  disabled Buy signal #2 to investigate the cause and fix it.
- Updated Sell signal #1A and moved it into Sell signal #2A because of contradiction in its conditions.



Changes in December 12-16, 2022:

- removed time from import since it is no longer used.
- added new function in mongodb.py called store_should_buy() which is used to store the boolean value 
  of the should_buy variable if the bot can buy or not.
- added new function in mongodb.py called get_should_buy() which is used to get the boolean value 
  of the should_buy variable if the bot can buy or not.
- added store_should_buy and get_should_buy functions in mmbot in the import.
- changed the Timeframe of the bars from 1 minute to 15 minutes to further reduce "noises" in the chart and
  improve the buy & sell signals.
- in get_bars() function, I have changed ema_35 into ema_40 in order to be more precise and prevent false signals.
- in get_bars() function, I have adjusted the length of SMA from 480 down to 100 because our timeframe is now 
  15 minutes. SMA is now a crucial part of our new Buy and Sell logic.
- removed the Standard Deviation (SD) from get_bars() as it is no longer used in our new Buy and Sell logic.
- removed the time.sleep() in order_buy() and order_sell() functions.
- added store_should_buy(False) in order_buy() function. Its purpose is to prevent multiple buying orders 
  to be initiated at one time.
- added new function called buy_condition(n) which contains the new condition to initiate the Buy order.
- added new function called sell_condition(n) which contains the new condition to initiate the Sell order.
- added new function called should_buy_condition(n) which contains a new condition if whether the 
  bot can buy again or not.
- revamped the Buy & Sell logic of mmbot by changing strategy from Scalping to Swing trading. Our new logic is now
  primarily focused on SMA with length 100 accompanied by EMA 3,6,13,21,and 40 to generate Buy and Sell signals.
  In short, our Buy signal as of the current version of the bot is: If sma100 > ema3 > ema6 > ema13 > ema21 > ema40, 
  then we Buy, or if the price crosses the SMA-100 from below, then we Buy. Our Sell signal as of the current 
  version of the bot is: If sma100 < ema3 < ema6 < ema13 < ema21 < ema40, and Cost < Price, then we can Sell,
  or if the price crosses the SMA-100 from above, then we Sell. In this new logic, we are technically "ignoring" the
  small trends and instead we are focusing on bigger trends to minimize the "noises", false signals, and to improve
  our profits for each trade. The only con of this new logic is that it now takes a much more longer time (about half
  a day) before the bot initiates a Buy or Sell order.
- added new if condition under the while loop that sets the should_buy value to True if it is satisfied so that 
  the bot can buy once again.
- since we are now using a new Buy & Sell logic, I have also simplified the placeholder conditions to match with 
  our new logic.
- I have deployed our mmbot to Replit and found a way to make our script run 24/7 with the help of UpTimeRobot.com.
  this way, our bot can now run all the time to initiate the Buy & Sell orders on its own. If there are changes in
  our bot, I can simply copy paste it into Replit and rerun it to apply the changes.
- In order for mmbot to run 24/7 at Replit with the help of UpTimeRobot.com, I have added new set of codes in mmbot 
  script (which is only in Replit) called Flask which is used to turn mmbot into a "web application" to keep it alive.
- added/revised new comments in mmbot.py and mongodb.py

Changes in December 5-9, 2022:

- added the time module in the import to enable sleeping.
- simplified the print_data() function by removing the if...else codes within it.
- added the SMA and Standard Deviation under get_bars() function. The purpose of these codes is to determine the
  maximum price allowed that the bot can buy based on the Standard Deviation of the prices.
- removed the RSI under get_bars() function because it currently serves no purpose in our bot.
- added the Linear Regression Angle under get_bars() function. The purpose of this code is to determine whether
  the market is bullish, bearish, or sideways based on the angle of the line regression.
- added variables for mark price, ema_6[-1], ema_6[-2], and ema_3[-2] under order_buy() and order_sell() functions.
  these variables will be used in store_placeholder_buy() and store_profit_history() for future debugging and/or
  analyzation of buy/sell orders.
- added the print_datetime() and time.sleep(5) under order_buy() and order_sell() functions. the purpose of these
  is to prevent multiple buying/selling within a specific time and to ensure that the bot will only buy/sell
  1 position at a time.
- the get_signal() code under the buy_sell_logic() function is now changed into print_data()
- added new if-condition under the buy_sell_logic() function that uses the Standard Deviation to determine the
  maximum price allowed that the bot can buy, and Linear Regression Angle that tells the bot to stop buying if
  the market is currently sideways.
- added additional conditions under the buy_sell_logic() function using ema_3, ema_6, ema_13, and ema_21 to 
  ensure that the bot buys/sells at the right timing.
- included the print_datetime() at the bottom of the buy_sell_logic() function.
- simplified the placeholder logic codes by using the for-loop code. 

Changes in November 28 - December 2, 2022:

- deleted the file "mmbot (old-sma).py"
- renamed the variable QTY_PER_TRADE into QTY_TRADE.
- removed the time.sleep code in order to adapt more quickly with the price changes for our scalping strategy.
- removed the print("Sleep for 1 minute") and print("="*40, end="\n\n") codes under the get_pause() function.
- removed the time module from import.
- removed the parameter asset in the get_wallet_balance() function.
- removed the parameter symbol in the get_position() function.
- removed the parameter symbol in the get_bars() function.
- removed the parameter Symbol in the get_last_price() function.
- removed the parameter Symbol in the get_mark_price() function.
- renamed get_signal() function into print_data() function.
- removed the fast and slow parameter in print_data function and added the id parameter.
- changed ema_5 into ema_6, and also changed ema_80 into ema_35.
- simplified the codes under print_data() function in order to display only the last price, mark price, 
  placeholder, position, ema_3, ema_6, and RSI into the display.
- added the id parameter in the order_buy function.
- removed the buy fee and Quantity variable in the order_buy() and order_sell() function because we will be 
  setting the buy/sell quantity to be equal directly to QTY_TRADE variable to be more precise and no decimals.
- removed the get_quantity_precision() function since it is no longer needed in order_buy() and order_sell()
- recoded the calculation for profit which is now based on the wallet balances.
- since the bot now runs about every 1 second, I've simplified the output display by adding ,end="" codes at 
  end of print() codes in order to save space/lines on the display.
- created a new function called buy_sell_logic() where it will contain the entire if...else codings for our buy 
  and sell logic of mm_bot.
- removed the RSI conditions in the buy_sell_logic().
- added new conditions in the buy_sell_logic() that determines if we are in the buying/selling range.
- added new conditions in the buy_sell_logic() that determines when exactly to initiate the buy/sell order.
- added the parameters place, id, and num in the buy_sell_logic() function.
- added the print_data() function under the buy_sell_logic() function.
- added id numbers such as [1], [2], [3], abd [4] at the end of print() codes in buy_sell_logic() to determine 
  which print() is executed.
- removed the place, should_buy, and print() under the while loop to simplify the codings.
- added new conditions under while loop to enable the bot to have 5 place (placeholders) for the buy value:
  If the mark price goes below the 1st place, then the bot uses the 2nd place to redo the buy & sell logic.
  If the bot manages to sell from 2nd place or if the mark price goes higher than the 1st place, then the bot 
  goes back to the 1st place. This logic applies to the 3rd, 4th, and 5th place. The purpose of these codes
  is to enable the bot to continue the buy & sell logic even if the mark price goes down unexpectedly. It will 
  temporarily hold the previous place and continue the buy & sell logic while waiting for the mark price to go
  up again to sell back the previous place.
- revised and added new comments in the code.

Changes in November 21-25, 2022:

- in mongodby.py, I have added a new code under the store_profit_history() function that lists the new profits
  gained by id numbers (example: id: 1, id: 2, id: 3, etc.)
- installed TA-lib module in python - Technical Analysis library for financial time series datasets (open, close, 
  high, low, volume) We will use Talib to calculate the EMAs and RSI indicator for our bot.
- created a copy of mm_bot called "mmbot (talib-ema).py" THIS IS NOW OUR CURRENT FILE and we will use this to 
  import talib and code our buy & sell logic based on the EMA Crossover & RSI Indicator Strategy.
- deleted the get_sma() function, sma_fast bar, and sma_slow bar as it is no longer needed in our strategy.
- added the following new bars under get_bars() function: ema_3, ema_5, ema_13, ema_21, ema_80, and RSI.
- changed the buy & sell logic of the mm_bot to follow the ema_3 and ema_5 crossover strategy.
- removed the "should_buy == true" condition from the buy & sell logic as it is unnecessary.
- removed the SMA_FAST and SMA_SLOW variables as it is no longer needed.
- At this point, I have decided to change our Paper Trading Platform from Alpaca to Binance Futures (Mock Trading)
  the following changes are the steps required to transition from Alpaca to Binance:
- first, I made an account in Binance Futures and created an API key for our bot.
- then, installed python-binance using pip (pip install python-binance)
- removed alpaca_trade_api from import. Then I have added binance.client and pandas in the import.
- inputted our binance futures api_key and and api_secret in config.py, then changed the client coding in mm_bot
  in accordance with the binance.client module.
- added new variables: ASSET = 'USDT' and TIMEFRAME = '1m'
- updated the coding in get_position() function to connect to Binance Futures.
- added new function called get_wallet_balance() that connects to Binance Futures.
- added new function called get_quantity_precision() that gets the precision (number of decimals accepted) of an
  asset (like USDT) when we buy or sell in Binance. 
- updated the coding in get_signal() function to work properly with the data (bars) from Binance Futures.
- updated and added new codes under get_bars() function to connect to Binance Futures and get the bars (klines)
  of the symbol (ETHUSDT) that we are trading.
- added new function called order_buy()  that connects to Binance Futures to place an order to Buy.
- added new function called order_sell() that connects to Binance Futures to place an order to Sell.
- added the wallet balance in our output display to see the increase/decrease in our wallet.
- updated the codings in the if...else conditions to work properly with the data (bars) from Binance Futures.
- updated and added new comments in the code.
- added RSI indicator in buy/sell logic: If RSI < 33 then BUY, If RSI > 66 then Sell.
- added new function called get_last_price(). This function gets the latest price of the symbol (ETHUSDT) in 
  to be displayed in the output for "Current:"
- added new function called get_mark_price(). This function gets the mark price of the symbol (ETHUSDT) in 
  order to store it in the database as a placeholder, to calculate the profit, and to be used in buy/sell logic. 
- replaced all "float(bars.close.iloc[-1])" in the code with "get_mark_price(SYMBOL)" so that instead of using
  the latest close value, we will now be using the mark price to become more accurate.

Changes in November 14-18, 2022: ~

- added new "test1" file where I reverted some changes like removing the get_sell() function to fix bugs.
- added "test for print()" file to see the values of variables like bars.sma_fast, bars.closed, bars, and others.
- added "mongodb" file to test the connection to mongodb database
- added functions to store and get placeholder value for buy (these functions are inside mongodb.py)
- NOTE: The values stored in the placeholder in mongodb are based on the bot's Buy and Sell IN MY CRYPTO ACCOUNT.
- added id numbers such as [1], [2], [3], etc. at the end of print() codes to determine which print() is executed.
  (for coding purposes)
- moved the "place" variable within the while() loop.
- added new "test2" file to test whether a normal txt file would work as a database as opposed to mongodb.
- renamed "test1" into "mmbot with mongodb"
- renamed "test2" into "mmbot with txt database"
- renamed "test" into "mmbot (old)" --- might as well delete this file sooner or later.
- in "mmbot with txt database", added new functions: write_datab_buy(new_placeh) and read_datab_buy()
- I've personally decided to pause the development of mm_bot with mongodb database because of the potential 
  problem with users having different alpaca accounts. As an alternative, I've decided to use a normal txt 
  file as a local database that works for users with different alpaca accounts. For this reason, our most 
  current file for mm_bot as of date is "mmbot with txt database.py"
- renamed "Changes.txt" file into "updates.txt"
- added the "Future Plans/Changes for MM_Bot" section in the "updates.txt" file.
- added/changed some comments in the code.
- after our meeting, we have decided to continue the development of mm_bot with mongodb and pause the one with 
  txt database. For this reason, our most current file for mm_bot as of date is "mmbot with mongodb.py"
- deleted the old file "mmbot (old).py"
- backed up the "database.txt" and "mongo with txt database.py" files and removed them from the current folder.
- renamed "mmbot with mongodb.py" into "mmbot.py" because it is now our focus and most current file that uses
  mongodb as the database.
- simplified the if...else parts of the code for buying/selling by merging some conditions together and removing
  the repetitive if...else parts in the code.
- added the values of fast[-1] and fast[-2] on the output display for debugging purposes.
- resetted the value of time.sleep() back to 60 seconds (1 minute) for debugging purposes.
- added new if...else code in get_signal() function so that when in selling phase, the "fast" output on the 
  display is now "current" value output (same as fast), and the "slow" output on the display is now "bought at" 
  output. (same as the value of placeholder for buy)
- moved the print() codes for fast[-1] and fast[-2] output display inside the get_signal() function.
- since the if...else code of buying and selling is now simplified, I have removed the id numbers such as [1], 
  [2], [3], etc. at the end of print() codes.
- added the new store_profit_history() function in mongodb.py that records the date, time, and profit into 
  the database every time mm_bot sells. I've also imported this function into mmbot.py under Selling Phase codes.
- improved/edited some comments in the code.
- simplified the import codes.
- added new codes under the store_profit_history() function [in mongodb.py] that adds the new profit gained to the 
  "total profit" variable in the database. 
- currently researching about EMA and RSI indicator and planning how to apply it into the mm_bot codes.
- added new comments for the functions in mongodb.py

Changes in November 10-11, 2022: ~

- added new codes in order to prevent loss/negative profits when selling.
- the bot now compares the current fast value to the previous fast value (when it buys) to decide when to sell.
- set the SMA_FAST value to 1 and SMA_SLOW value to 15 in order to become more recent with the stock values.
- changed/simplified the get_pause() function; removed redundant codes.
- time.sleep() function included within get_pause() function; set to constant value of 60 seconds.
- added date & time in the output display for time reference.
- added \n (new line characters) in the output display for readability.
- changed print("*"*20) into print("="*40)
- improved/reorganized some codes, lines, and comments for readability.
- fixed some typographical errors in code.
- added new codes that instructs the bot to wait for the lowest possible fast value before buying.
- added interval (+5) for the highest amount of increase in value to be accepted when buying.
- added new codes that instructs the bot to wait for the highest possible fast value before selling.
- added interval (-5) for the least amount of decrease in value to be accepted when selling.
- reorganized some codes, lines, and comments for readability.
- deleted redundant py files such as def.py, new-test.py, and mm_bot.py
- changed time pause to 30 seconds